# 统一异常处理

### 统一异常处理
> 显然，默认的异常页是对用户或者调用者而言都是不友好的，所以,一般我们都会进行实现自己业务的异常提示信息。

RESTful API中的异常Exception处理有两个基本要求，需要明确业务意义的错误消息以及hhtp状态码。良好的错误消息能够让API客户端纠正问题。在本文中，我们将讨论并实现Spring的REST API异常处理。

Restful API错误/异常设计
在RESTful API中设计异常处理时，最好在响应中设置HTTP状态代码，这样可以表示客户端的请求为什么会失败的原因。当然也可以发送更多信息包括HTTP状态码，这些将帮助客户端迅速定位错误。

比如下面是Springboot表示/api/producer不支持post方式的错误信息：

    {
        "timestamp": 1530772698787,
        "status": 405,
        "error": "Method Not Allowed",
        "exception": "org.springframework.web.HttpRequestMethodNotSupportedException",
        "message": "Request method 'POST' not supported",
        "path": "/api/producer"
    }

对于我们的业务应用，应该提供更详细的有关业务的错误信息：

    HTTP/1.1  404
    Content-Type: application/json
    {
        "status": 404,
        "error_code": 123,
        "message": "Oops! It looks like that file does not exist.",
        "details": "File resource does not exist.We are working on fixing this issue.",
        "information_link": "/api/producer"
    }

在设计REST API的响应时，需要理解以下重点：

1. status表示HTTP状态代码。
2. error_code表示REST API特定的错误代码。此字段有助于传递API /业务领域中特定信息。比如类似Oracle错误ORA-12345
3. message字段表示人类可读的错误消息。国际化信息
4. details部分表示完整详细信息。
5. information_link字段指定有关错误或异常的详细信息的链接。


### Restful错误处理
#### 创建全局异常处理类GlobalExceptionHandler
> 利用@ControllerAdvice和@ExceptionHandler定义一个异常处理类。能够统一跨所有@RequestMapping方法实现集中式异常处理。

@ControllerAdvice：控制器增强，它是应用于整个应用程序，而不仅仅是某个控制器。使@ExceptionHandler、@InitBinder、@ModelAttribute注解的方法应用到所有的 @RequestMapping注解的方法。

@ExceptionHandler：异常处理器，此注解的作用是当出现其定义的异常时进行处理的方法。

#### 定义错误类信息的代码
定义错误信息类ApiErrorResponse，把这个对象嵌入ResponseEntity中返回。

#### 下面我们看看几种常见的客户端请求错误场景下如何使用这个ApiErrorResponse类：

（1）当方法参数不是预期类型时，抛出MethodArgumentTypeMismatchException异常，我们构造ApiErrorResponse类嵌入ResponseEntity返回：