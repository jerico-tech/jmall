# Spring boot集成Mybatis（注解版和XML版）
> 同一工程中同时使用注解版和XML版。以本工程为例
### 添加依赖
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.1.0</version>
    </dependency>

    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency> 
### application.yml文件配置
    spring:
      datasource:
        username: root
        password: 123456
        url: jdbc:mysql://127.0.0.1:3306/mall?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
        driver-class-name: com.mysql.cj.jdbc.Driver
    # 配置扫描xml文件的路径
    mybatis:
      mapper-locations: classpath:/mapper/*.xml
      config-location:  classpath:/config/mybatis-config.xml
### mybatis-config.xml配置
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE configuration
            PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-config.dtd">
    <configuration>
        <!--配置驼峰属性自动映射，例如实体中属性为 userSex,数据库属性为 user_sex，MyBatis 默认是不能自动转换的。我们可以在application.yml中配置 mybatis.configuration.map-underscore-to-camel-case=true或在该文件中进行如下配置，实现自动映射。如果不进行此配置，通常我们要自定义以下结果集映射： -->
        <settings>
            <setting name="mapUnderscoreToCamelCase" value="true"/>
        </settings>
        <typeAliases>
            <package name="com.jerico.jmall.domain.entity"/>
        </typeAliases>
    </configuration>

以上配置也可以直接配置在application.yml文件中，无需在application.xml中配置classpath:/config/mybatis-config.xml。

    mybatis:
      configuration:
        map-underscore-to-camel-case: true
### 配置Spring boot扫描Mybatis仓储，有两种配置方式:
##### 方式一：在启动类上加入@MapperScan，填写Mapper接口所在的包名，SpringBoot就会自动将该包中的Mapper接口进行加载,@MapperScan("com.jerico.jmall.dao")

        @SpringBootApplication
        @MapperScan("com.jerico.jmall.dao")
        public class JmallApplication {
            public static void main(String[] args) {
                SpringApplication.run(JmallApplication.class, args);
            }
        }
##### 方式二：在Mapper接口上加上@Mapper注解，SpringBoot就会自动夹在该Mapper接口
XML版mapper

    @Repository
    @Mapper
    public interface UserMapper {
        UserEntity getUser(long id);
        List<UserEntity> listUsers();
        void insetUser(UserEntity userEntity);
        void updateUser(UserEntity userEntity);
        void deleteUser(long id);
    }

注解版：

    @Repository
    @Mapper
    public interface UserDAO {
        @Select("select * from user where id = #{id}")
        UserEntity getUserById(@Param("id") long id);
    
        @Select("select * from user where ${column} = #{value}")
        UserEntity getUserByColumn(@Param("column") String column, @Param("value") String value);
    
        @Select("select * from user")
        List<UserEntity> listUsersA();
    
        /**
         * insert 这里用了一个 @Options 的注解，实现了「主键回填」的功能，也就是说，再创建好一个 user 之后，user 请求体中的 id 属性会自动赋值好；
         * @SelectKey 注解被注释掉了，这个注解也同样可以实现「主键回填」的功能；//   @SelectKey(statement = "select last_insert_id()", keyProperty = "id", before = false, resultType = Integer.class)
         * @param userEntity
         */
        @Insert("INSERT INTO user(name, age, sex) " +
                "VALUES(#{name}, #{age}, #{sex})")
        @Options(useGeneratedKeys = true, keyProperty = "id")
        void insertUser(UserEntity userEntity);
    
        @Update("update user set name = #{name} where id = #{id}")
        void updateUser(UserEntity userEntity);
    
        @Delete("delete from user where id = #{id}")
        void deleteUser(long id);
    }
    
扫描mybatis的这两种方式都可以，根据项目结构进行选择即可，也可以结合私用。
### 设置日志打印
设置mybatis日志打印，在配置文件（application.yml）中加入如下配置：

    logging:
      level:
        #Mapper所在的包
        com.jerico.jmall.dao: debug

### 定义实体类UserEntity；

### 定义Mapper（com.jerico.jmall.dao包下）。以DAO结尾的接口为注解版；以Mapper结尾的接口为XML版；
比如本工程中的UserDAO和UserMapper。


### Mybatis注解
Mybatis提供了四个注解，先简单了解一下，后面的完整示例中演示了相应的实例

@Insert(“sql”) 增

@Delete(“sql”) 删

@Update(“sql”) 改

@Select(“sql”) 查

### 注解方法参数获取
1.普通参数读取

在方法参数前使用@Param注解对参数进行标记，在sql中使用#{属性名}来读取属性。

    @Select("select * from user where id = #{id}")
    UserEntity getUserById(@Param("id") long id);

2.对象参数读取

直接在sql中使用#{属性名}来读取属性

    @Insert("INSERT INTO user(name, age, sex) " +
                "VALUES(#{name}, #{age}, #{sex})")
    @Options(useGeneratedKeys = true, keyProperty = "id")
    void insertUser(UserEntity userEntity);

> 这里补充一点，@Options注解和@Insert注解结合使用，可以将保存后的主键设置到user实体中。也就是说保存前user的id是没值的，
保存后mybatis会自动将数据库中的主键设置到user的id属性上，keyColumn = "id"为数据库主键名，keyProperty = "id"为实体的主键属性名。

### 动态SQL

### 参考
http://www.itcast.cn/news/20180921/17273351782.shtml
https://blog.csdn.net/KingBoyWorld/article/details/78948304
如何在logback中显示mybatis查询日志：https://blog.csdn.net/kingboyworld/article/details/78644416
